{"version":3,"sources":["BirdCard.jsx","Slideshow.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","card","maxWidth","breakpoints","down","width","media","height","backgroundPosition","modal","overflowY","margin","padding","up","image","boxSizing","marginTop","BirdCard","visit","classes","React","useState","open","setOpen","path","window","location","href","includes","Grid","container","item","xs","sm","md","spacing","Card","className","CardActionArea","CardMedia","best_photo","title","species","CardContent","Typography","gutterBottom","variant","component","color","records","length","datetime","id","CardActions","Button","size","onClick","Modal","onClose","aria-labelledby","aria-describedby","Paper","Container","src","full_image","alt","map","record","index","key","filename","Slideshow","items","autoPlay","indicators","i","style","backgroundColor","display","MediaCard","setItems","setError","setIsLoaded","mode","URLSearchParams","search","get","getBirds","fetch","then","res","json","error","useEffect","setInterval","direction","AppBar","position","Toolbar","Boolean","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ae953172.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Modal from '@material-ui/core/Modal';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) =>\ncreateStyles({\n  card: {\n    maxWidth: 345,\n    [theme.breakpoints.down('xs')]: {\n      maxWidth: 'none',\n      width: '100%'\n    }\n  },\n  media: {\n    height: 250,\n    backgroundPosition: 'top'\n  },\n  modal: {\n      overflowY: 'scroll',\n      margin: \"20px 20px 20px 20px\",\n      padding: \"20px\",\n      [theme.breakpoints.down('xs')]: {\n        margin: \"10px 10px 10px 10px\",\n      },\n      [theme.breakpoints.up('sm')]: {\n        width: '600px',\n        margin: \"10px auto 10px auto\"\n      }\n  },\n  image: {\n      width: \"100%\",\n      boxSizing: \"border-box\",\n      marginTop: '10px',\n      [theme.breakpoints.down('xs')]: {\n        \n      }\n  }\n})\n);\n\nexport default function BirdCard({visit}) {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const path = window.location.href.includes(\"10.0.4.79\") ? \"\" : \"http://10.0.4.79\";\n\n    const handleOpen = () => {\n      setOpen(true);\n    };\n  \n    const handleClose = () => {\n      setOpen(false);\n    };\n  \n    return (    \n      <Grid container item xs={12} sm={6} md={4} spacing={1}>\n            <Card className={classes.card}>\n            <CardActionArea>\n                <CardMedia\n                className={classes.media}\n                image={path + visit.best_photo}\n                title={visit.species}\n                />\n                <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {visit.species}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {visit.records.length} photos <br />\n                    <time>{visit.records[0].datetime}</time>\n                    {visit.id}\n                </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\" onClick={handleOpen}>\n                More Photos\n                </Button>\n                <Button size=\"small\" color=\"primary\">\n                Tweet\n                </Button>\n            </CardActions>\n            </Card>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                className={classes.modal}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                >\n                <Paper>\n                    <Container>\n                        <Grid container spacing={3}>\n                          <Grid item><img className={classes.image} src={visit.full_image} alt={visit.records[0].species}/></Grid> \n                            {\n                                visit.records.map((record, index) => { \n                                  //return <Grid key={index} item><img className={classes.image} key={index} src={path + record.filename} alt={record.species}/></Grid> \n                                  return <img key={index} className={classes.image} key={index} src={path + record.filename} alt={record.species}/>   \n                                })\n                            }\n                            \n                        </Grid>\n                    </Container>\n                </Paper>\n            </Modal>\n        </Grid> \n      );\n}","import React from 'react';\nimport Carousel from 'react-material-ui-carousel'\nimport { Paper, Button } from '@material-ui/core'\n\nfunction Slideshow({items}){\n    const path = window.location.href.includes(\"10.0.4.79\") ? \"\" : \"http://10.0.4.79\";\n\n    return (\n        <Carousel autoPlay={true} indicators={false}>\n            {\n                items.map( (item, i) => <Paper style={{backgroundColor:\"#111\", height:\"100%\"}} key={i} item={item}>\n                    <img style={{display: \"block\", margin:\"auto\"}} src={path + item.best_photo} alt={item.species} />\n                </Paper> )\n            }\n        </Carousel>\n    )\n}\n\nexport default Slideshow;","/* eslint-disable no-unused-expressions */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport BirdCard from './BirdCard';\nimport Slideshow from './Slideshow';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    card: {\n      maxWidth: 345,\n      [theme.breakpoints.down('xs')]: {\n        maxWidth: 'none',\n        width: '100%'\n      }\n    },\n    media: {\n      height: 250,\n      backgroundPosition: 'top'\n    },\n    container: {\n      marginTop: 80,\n      [theme.breakpoints.down('xs')]: {\n        marginTop: 60,\n      }\n    }\n  })\n);\n\nexport default function MediaCard() {\n  const classes = useStyles();\n  const [items, setItems] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const path = window.location.href.includes(\"10.0.4.79\") ? \"\" : \"http://10.0.4.79\";\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const mode = urlSearchParams.get('mode');\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  let getBirds = () => {\n    fetch(`${path}/visitations.json`)\n      .then(res => res.json())\n      .then(\n        (items) => {\n          setIsLoaded(true);\n          if (items.length > 0) {\n            setItems(items);\n          }\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }\n\n  useEffect(() => {\n    getBirds();\n    setInterval(getBirds, 60000);\n  }, [])\n\n  return (\n    mode === 'slideshow' ? <Slideshow items={items} /> : <Grid container direction=\"row\" spacing={1}>\n      <Grid item xs={12}>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Project Leroy\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Grid>\n      <Grid item xs={12}>\n        <Container className={classes.container}>\n          <Grid container spacing={3}>\n            {\n              items.map((visit, index) => {\n                return <BirdCard key={index} visit={visit} />\n              })\n            }\n          </Grid>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<Demo />, document.querySelector('#root'));\n    \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}